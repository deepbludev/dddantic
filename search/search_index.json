{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"di/","title":"Dependency Injection in <code>deepblu</code>","text":"<p>This module provides a simple dependency injection library, based on a registry of bindings between interfaces and their implementations. Interfaces are classes (typically abstract) and implementations are concrete subclasses or factory functions that return a value of the same type as the Interface.</p>"},{"location":"di/#basic-usage","title":"Basic usage","text":"Basic usage:<pre><code>from abc import ABC, abstractmethod\nfrom typing import Awaitable, Callable, Generic, TypeVar\n\nfrom pydantic import BaseModel\n\nfrom deepblu import di\n\n\nclass User:\n    def __init__(self, id: str, name: str) -&gt; None:\n        self.id = id\n        self.name = name\n\n\nE = TypeVar(\"E\")\n\n\nclass CreateUserRequest(BaseModel):\n    id: str\n    name: str\n\n\nclass Repo(Generic[E], ABC):\n    @abstractmethod\n    async def get(self, id: str) -&gt; E:\n        pass\n\n    @abstractmethod\n    async def save(self, entity: E) -&gt; None:\n        pass\n\n\nclass UserSQLRepo(Repo[User]):\n    async def get(self, id: str) -&gt; User:\n        return User(id, \"John\")\n\n    async def save(self, entity: User) -&gt; None:\n        print(f\"Saving user {entity.id} to SQL\")\n        pass\n\n\nTUseCaseResult = TypeVar(\"TUseCaseResult\")\nTUseCaseRequest = TypeVar(\"TUseCaseRequest\")\n\n\nclass UseCase(Generic[TUseCaseRequest, TUseCaseResult], ABC):\n    @abstractmethod\n    async def run(self, dto: TUseCaseRequest) -&gt; TUseCaseResult:\n        pass\n\n\nclass CreateUser(UseCase[CreateUserRequest, User]):\n    @di.inject\n    def __init__(self, repo: Repo[User]) -&gt; None:\n        self.repo = repo\n\n    async def run(self, dto: CreateUserRequest) -&gt; User:\n        user = User(**dto.dict())\n        await self.repo.save(user)\n        return user\n\n\nUseCaseFn = Callable[[TUseCaseRequest], Awaitable[TUseCaseResult]]\n\n\n@di.inject\ndef create_user_usecase(repo: Repo[User]) -&gt; UseCaseFn[CreateUserRequest, User]:\n    async def run(dto: CreateUserRequest) -&gt; User:\n        user = User(**dto.dict())\n        await repo.save(user)\n        return user\n\n    return run\n\n\n@di.injectable\nclass UserService:\n    def __init__(self, repo: Repo[User], create_user_usecase: CreateUser) -&gt; None:\n        self.repo = repo\n        self.create_user_usecase = create_user_usecase\n\n    async def create_user(self, dto: CreateUserRequest) -&gt; User:\n        user = await self.create_user_usecase.run(dto)\n        await self.repo.save(user)\n        return user\n\n    async def get_user(self, id: str) -&gt; User:\n        return await self.repo.get(id)\n\n    async def save_user(self, user: User) -&gt; None:\n        await self.repo.save(user)\n\n\nclass APIKey:\n    def __init__(self, key: str) -&gt; None:\n        self.key = key\n\n\ndef api_key_factory() -&gt; APIKey:\n    return APIKey(\"some-random-apikey\")\n\n\n# No decorator needed\nclass UserController:\n    def __init__(self, service: UserService, api_key: APIKey) -&gt; None:\n        self.service = service\n        self.api_key = api_key.key\n\n    async def get_user(self, id: str) -&gt; User:\n        return await self.service.get_user(id)\n\n    async def save_user(self, user: User) -&gt; None:\n        await self.service.save_user(user)\n\n\n# Register bindings\ndi.bind(APIKey, api_key_factory) #single binding\ndi.add(UserService) # single binding when using same interface and implementation\n\ndi.bind_all( # Simplest way to add bindings in bulk in main.py\n    CreateUser,\n    create_user_usecase,\n    di.injectable(UserController),  # No decorator needed\n    (Repo[User], UserSQLRepo),\n)\n\n# See it in action\nservice = UserService()  # type: ignore\nuser = await service.get_user(\"1\")\nassert user.name == \"John\"\n\napi_key = di.get(APIKey)\nassert api_key.key == \"some-random-apikey\"\n\nctrl = UserController()  # type: ignore\nuser = await ctrl.get_user(\"1\")\nassert user.name == \"John\"\nassert ctrl.api_key == \"some-random-apikey\"\n\ncreate_user = CreateUser()\nuser = await create_user.run(CreateUserRequest(id=\"1\", name=\"John\"))\nassert user.name == \"John\"\n\ncreate_user_fn = create_user_usecase()\nuser = await create_user_fn(CreateUserRequest(id=\"1\", name=\"John\"))\nassert user.name == \"John\"\n\n# You can also manually inject\nuser_sql_repo = UserSQLRepo()\ncreate_user = CreateUser(repo=user_sql_repo)\nuser = await create_user.run(CreateUserRequest(id=\"1\", name=\"John\"))\nassert user.name == \"John\"\n</code></pre>"},{"location":"di/api-reference/","title":"API Reference","text":""},{"location":"di/api-reference/#deepblu.di.add","title":"<code>add(provider)</code>","text":"<p>Add a provider to the registry.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Provider[TValue]</code> <p>The provider to add to the registry, bound to itself.</p> required Example:<pre><code>di.add(DummyImpl)\n</code></pre> Source code in <code>deepblu/di/injection.py</code> <pre><code>def add(provider: Provider[TValue]) -&gt; None:\n\"\"\"Add a provider to the registry.\n\n    Args:\n        provider: The provider to add to the registry, bound to itself.\n\n    ```py title=\"Example:\" linenums=\"1\"\n    di.add(DummyImpl)\n    ```\n    \"\"\"\n    bind(provider, provider)\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.bind","title":"<code>bind(interface, impl)</code>","text":"<p>Bind an interface to an implementation.</p> <p>Args:      interface: The interface to bind.      impl: The implementation to bind to the given interface.</p> Example:<pre><code> di.bind(DummyInterface, DummyImpl)\n di.bind(OtherDummyInterface, dummy_factory)\n</code></pre> Source code in <code>deepblu/di/injection.py</code> <pre><code>def bind(interface: Provider[TValue], impl: Provider[TValue]) -&gt; None:\n\"\"\"Bind an interface to an implementation.\n\n     Args:\n         interface: The interface to bind.\n         impl: The implementation to bind to the given interface.\n\n    ```py title=\"Example:\" linenums=\"1\"\n     di.bind(DummyInterface, DummyImpl)\n     di.bind(OtherDummyInterface, dummy_factory)\n    ```\n    \"\"\"\n    registry[interface] = impl\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.bind_all","title":"<code>bind_all(*providers)</code>","text":"<p>Bind multiple interfaces to implementations.</p> <p>Parameters:</p> Name Type Description Default <code>providers</code> <code>AnyBinding | AnyProvider</code> <p>A list of Binding tuples of the</p> <code>()</code> Example:<pre><code>di.bind_all(\n    (DummyInterface, DummyImpl), (OtherDummyInterface, dummy_factory)\n)\n</code></pre> Source code in <code>deepblu/di/injection.py</code> <pre><code>def bind_all(*providers: AnyBinding | AnyProvider) -&gt; None:\n\"\"\"Bind multiple interfaces to implementations.\n\n    Args:\n        providers: A list of Binding tuples of the\n        form ```(interface, implementation)```.\n\n    ```py title=\"Example:\" linenums=\"1\"\n    di.bind_all(\n        (DummyInterface, DummyImpl), (OtherDummyInterface, dummy_factory)\n    )\n    ```\n    \"\"\"\n    for provider in providers:\n        if isinstance(provider, tuple):\n            interface, impl = provider\n        else:\n            interface, impl = provider, provider\n        bind(interface, impl)\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.get","title":"<code>get(interface)</code>","text":"<p>Get the implementation instance for an interface.</p> <p>Parameters:</p> Name Type Description Default <code>interface</code> <code>Provider[TValue]</code> <p>The interface to get the implementation instance for.</p> required <p>Returns:</p> Type Description <code>TValue</code> <p>The implementation instance for the given interface.</p> Example:<pre><code>dummy_instance: DummyInterface = di.get(DummyInterface)\nother_dummy_instance: OtherDummyInterface = di.get(OtherDummyInterface)\n</code></pre> Source code in <code>deepblu/di/injection.py</code> <pre><code>def get(interface: Provider[TValue]) -&gt; TValue:\n\"\"\"Get the implementation instance for an interface.\n\n    Args:\n        interface: The interface to get the implementation instance for.\n\n    Returns:\n        The implementation instance for the given interface.\n\n    ```py title=\"Example:\" linenums=\"1\"\n    dummy_instance: DummyInterface = di.get(DummyInterface)\n    other_dummy_instance: OtherDummyInterface = di.get(OtherDummyInterface)\n    ```\n    \"\"\"\n    return registry[interface]\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.inject","title":"<code>inject(func)</code>","text":"<p>Decorator to inject dependencies into a function or <code>__init__</code> method.</p> Example:<pre><code>class DummyClass:\n    @di.inject\n    def __init__(self, dummy: DummyInterface):\n        self.dummy = dummy\n</code></pre> Example:<pre><code>@di.inject\ndef print_dummy(dummy: DummyInterface):\n    print(repr(dummy))\n</code></pre> Source code in <code>deepblu/di/injection.py</code> <pre><code>def inject(func: Provider[TValue]) -&gt; Callable[..., TValue]:\n\"\"\"Decorator to inject dependencies into a function or `__init__` method.\n\n    ```py title=\"Example:\" linenums=\"1\"\n    class DummyClass:\n        @di.inject\n        def __init__(self, dummy: DummyInterface):\n            self.dummy = dummy\n    ```\n\n    ```py title=\"Example:\" linenums=\"1\"\n    @di.inject\n    def print_dummy(dummy: DummyInterface):\n        print(repr(dummy))\n    ```\n    \"\"\"\n\n    @wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -&gt; TValue:\n        annotations = inspect.getfullargspec(func).annotations\n        for k, v in annotations.items():\n            if v in registry.bindings and k not in kwargs:\n                kwargs[k] = registry.bindings[v]()\n        return func(*args, **kwargs)\n\n    return wrapper\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.injectable","title":"<code>injectable(cls)</code>","text":"<p>Inject dependencies into a class <code>__init__</code>.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>Provider[TValue]</code> <p>The class to inject dependencies into.</p> required <p>Example:<pre><code>@di.injectable\nclass DummyClass:\n    def __init__(self, dummy: DummyInterface):\n        self.dummy = dummy\n</code></pre> Example:<pre><code>class DummyClass:\n    def __init__(self, dummy: DummyInterface):\n        self.dummy = dummy\n\ndi.add(di.injectable(DummyClass)) # avoids decorator syntax\n</code></pre></p> Source code in <code>deepblu/di/injection.py</code> <pre><code>def injectable(cls: Provider[TValue]) -&gt; Provider[TValue]:\n\"\"\"Inject dependencies into a class `__init__`.\n\n    Args:\n        cls: The class to inject dependencies into.\n\n    ```py title=\"Example:\" linenums=\"1\"\n    @di.injectable\n    class DummyClass:\n        def __init__(self, dummy: DummyInterface):\n            self.dummy = dummy\n    ```\n    ```py title=\"Example:\" linenums=\"1\"\n    class DummyClass:\n        def __init__(self, dummy: DummyInterface):\n            self.dummy = dummy\n\n    di.add(di.injectable(DummyClass)) # avoids decorator syntax\n    ```\n    \"\"\"\n    cls.__init__ = inject(cls.__init__)  # type: ignore\n    return cls\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.registry.ProviderRegistry","title":"<code>ProviderRegistry</code>","text":"<p>Provider registry for dependency injection.</p> <p>Used only as a singleton instance called <code>registry</code>, exported by the <code>di</code> module.</p> Example:<pre><code>from deepblu.di import registry\n\nregistry.bind(Interface, Implementation)\nregistry[OtherInterface] = OtherImplementation\n\nisinstance(registry[Interface], Implementation) # True\nisinstance(registry.get(OtherInterface), OtherImplementation) # True\n\nregistry.bindings\n# {Interface: Implementation, OtherInterface: OtherImplementation}\n</code></pre> Source code in <code>deepblu/di/registry.py</code> <pre><code>class ProviderRegistry:\n\"\"\"Provider registry for dependency injection.\n\n    Used only as a singleton instance called `registry`, exported by the `di` module.\n\n    ```py title=\"Example:\"\n    from deepblu.di import registry\n\n    registry.bind(Interface, Implementation)\n    registry[OtherInterface] = OtherImplementation\n\n    isinstance(registry[Interface], Implementation) # True\n    isinstance(registry.get(OtherInterface), OtherImplementation) # True\n\n    registry.bindings\n    # {Interface: Implementation, OtherInterface: OtherImplementation}\n\n    ```\n    \"\"\"\n\n    __slots__ = \"__bindings__\"\n    __bindings__: dict[AnyProvider, AnyProvider]\n\n    def __init__(self) -&gt; None:\n        self.__bindings__ = {}\n\n    def bind(\n        self, interface: Provider[TValue], impl: Provider[TValue]\n    ) -&gt; \"ProviderRegistry\":\n\"\"\"Bind an interface to an implementation.\"\"\"\n        self.__bindings__[interface] = impl\n        return self\n\n    def __setitem__(\n        self, interface: Provider[TValue], impl: Provider[TValue]\n    ) -&gt; \"ProviderRegistry\":\n\"\"\"Bind an interface to an implementation.\"\"\"\n        return self.bind(interface, impl)\n\n    def get(self, interface: Provider[TValue]) -&gt; TValue:\n\"\"\"Get the implementation instance for an interface.\"\"\"\n        return cast(TValue, self.__bindings__[interface]())\n\n    def __getitem__(self, interface: Provider[TValue]) -&gt; TValue:\n\"\"\"Get the implementation instance for an interface.\"\"\" \"\"\n        return self.get(interface)\n\n    @property\n    def bindings(self) -&gt; dict[AnyProvider, AnyProvider]:\n\"\"\"Get current bindings\"\"\"\n        return self.__bindings__\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.registry.ProviderRegistry.bindings","title":"<code>bindings: dict[AnyProvider, AnyProvider]</code>  <code>property</code>","text":"<p>Get current bindings</p>"},{"location":"di/api-reference/#deepblu.di.registry.ProviderRegistry.__getitem__","title":"<code>__getitem__(interface)</code>","text":"<p>Get the implementation instance for an interface.</p> Source code in <code>deepblu/di/registry.py</code> <pre><code>def __getitem__(self, interface: Provider[TValue]) -&gt; TValue:\n\"\"\"Get the implementation instance for an interface.\"\"\" \"\"\n    return self.get(interface)\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.registry.ProviderRegistry.__setitem__","title":"<code>__setitem__(interface, impl)</code>","text":"<p>Bind an interface to an implementation.</p> Source code in <code>deepblu/di/registry.py</code> <pre><code>def __setitem__(\n    self, interface: Provider[TValue], impl: Provider[TValue]\n) -&gt; \"ProviderRegistry\":\n\"\"\"Bind an interface to an implementation.\"\"\"\n    return self.bind(interface, impl)\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.registry.ProviderRegistry.bind","title":"<code>bind(interface, impl)</code>","text":"<p>Bind an interface to an implementation.</p> Source code in <code>deepblu/di/registry.py</code> <pre><code>def bind(\n    self, interface: Provider[TValue], impl: Provider[TValue]\n) -&gt; \"ProviderRegistry\":\n\"\"\"Bind an interface to an implementation.\"\"\"\n    self.__bindings__[interface] = impl\n    return self\n</code></pre>"},{"location":"di/api-reference/#deepblu.di.registry.ProviderRegistry.get","title":"<code>get(interface)</code>","text":"<p>Get the implementation instance for an interface.</p> Source code in <code>deepblu/di/registry.py</code> <pre><code>def get(self, interface: Provider[TValue]) -&gt; TValue:\n\"\"\"Get the implementation instance for an interface.\"\"\"\n    return cast(TValue, self.__bindings__[interface]())\n</code></pre>"}]}