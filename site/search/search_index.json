{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"di/","title":"deepblu","text":""},{"location":"di/#deepblu.di--dependency-injection","title":"Dependency Injection","text":"<p>This module provides a simple dependency injection framework, based on a registry of bindings between interfaces and their implementations. Interfaces are classes (typically abstract) and implementations are concrete subclasses or factory functions that return a value of the same type as the Interface.</p> Basic Usage <pre><code>class DummyInterface(ABC):\n    def foo(self) -&gt; str:\n        raise NotImplementedError\n\n\nclass DummyImpl(DummyInterface):\n    def foo(self) -&gt; str:\n        return \"foo\"\n\n\nclass OtherDummyInterface:\n    def bar(self) -&gt; str:\n        return \"bar\"\n\n\ndef dummy_factory() -&gt; OtherDummyInterface:\n    return OtherDummyInterface()\n\n\ndi.bind(DummyInterface, DummyImpl)\ndi.bind(OtherDummyInterface, dummy_factory)\n## Equivalent to:\n# di.bind_all((DummyInterface, DummyImpl), (OtherDummyInterface, dummy_factory))\n\ndummy_instance: DummyInterface = di.get(DummyInterface)\nother_dummy_instance: OtherDummyInterface = di.get(OtherDummyInterface)\n\n&gt;&gt;&gt; dummy_instance.foo()\n\"foo\"\n\n&gt;&gt;&gt; other_dummy_instance.bar()\n\"bar\"\n</code></pre> <p>More advanced usage:</p> <pre><code>class User:\ndef __init__(self, id: str, name: str) -&gt; None:\n    self.id = id\n    self.name = name\n\n\nE = TypeVar(\"E\")\n\n\nclass CreateUserRequest(BaseModel):\n    id: str\n    name: str\n\n\nclass Repo(Generic[E], metaclass=abc.ABCMeta):\n    @abc.abstractmethod\n    async def get(self, id: str) -&gt; E:\n        pass\n\n    @abc.abstractmethod\n    async def save(self, entity: E) -&gt; None:\n        pass\n\n\nclass UserSQLRepo(Repo[User]):\n    async def get(self, id: str) -&gt; User:\n        return User(id, \"John\")\n\n    async def save(self, entity: User) -&gt; None:\n        print(f\"Saving user {entity.id} to SQL\")\n        pass\n\n\nTUseCaseResult = TypeVar(\"TUseCaseResult\")\nTUseCaseRequest = TypeVar(\"TUseCaseRequest\")\n\n\nclass UseCase(Generic[TUseCaseRequest, TUseCaseResult], metaclass=abc.ABCMeta):\n    @abc.abstractmethod\n    async def run(self, dto: TUseCaseRequest) -&gt; TUseCaseResult:\n        pass\n\n\nclass CreateUser(UseCase[CreateUserRequest, User]):\n    @di.inject\n    def __init__(self, repo: Repo[User]) -&gt; None:\n        self.repo = repo\n\n    async def run(self, dto: CreateUserRequest) -&gt; User:\n        user = User(**dto.dict())\n        await self.repo.save(user)\n        return user\n\n\nUseCaseFn = Callable[[TUseCaseRequest], Awaitable[TUseCaseResult]]\n\n\ndef create_user_usecase() -&gt; UseCaseFn[CreateUserRequest, User]:\n    async def create_user(dto: CreateUserRequest) -&gt; User:\n        return User(**dto.dict())\n\n    return create_user\n\n\nclass UserService:\n    @di.inject\n    def __init__(self, repo: Repo[User], create_user_usecase: CreateUser) -&gt; None:\n        self.repo = repo\n        self.create_user_usecase = create_user_usecase\n\n    async def create_user(self, dto: CreateUserRequest) -&gt; User:\n        user = await self.create_user_usecase.run(dto)\n        await self.repo.save(user)\n        return user\n\n    async def get_user(self, id: str) -&gt; User:\n        return await self.repo.get(id)\n\n    async def save_user(self, user: User) -&gt; None:\n        await self.repo.save(user)\n\n\nclass APIKey:\n    def __init__(self, key: str) -&gt; None:\n        self.key = key\n\n\ndef api_key_factory() -&gt; APIKey:\n    return APIKey(\"some-random-apikey\")\n\n\nclass UserController:\n    @di.inject\n    def __init__(self, service: UserService, api_key: APIKey) -&gt; None:\n        self.service = service\n        self.api_key = api_key.key\n\n    async def get_user(self, id: str) -&gt; User:\n        return await self.service.get_user(id)\n\n    async def save_user(self, user: User) -&gt; None:\n        await self.service.save_user(user)\n\n\ndi.bind_all(\n    CreateUser,\n    create_user_usecase,\n    UserService,\n    UserController,\n    (APIKey, api_key_factory)\n    (Repo[User], UserSQLRepo),\n)\n\n\nctrl: UserController = UserController() # or di.get(UserController)\nuser = await ctrl.get_user(\"1\")\nassert user.name == \"John\"\nassert user.id == \"1\"\nassert ctrl.api_key == \"some-random-apikey\"\n\ncreate_user = CreateUser() # or di.get(CreateUser)\nuser = await create_user.run(CreateUserRequest(id=\"1\", name=\"John\"))\nassert user.name == \"John\"\n\ncreate_user_fn = di.get(create_user_usecase)\nuser = await create_user_fn(CreateUserRequest(id=\"1\", name=\"John\"))\nassert user.name == \"John\"\n\n</code></pre>"},{"location":"di/#deepblu.di.add","title":"<code>add(provider)</code>","text":"<p>Add a provider to the registry.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>TProvider[TValue]</code> <p>The provider to add to the registry, bound to itself.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; di.add(DummyImpl)\n</code></pre> Source code in <code>deepblu/di/__init__.py</code> <pre><code>def add(provider: TProvider[TValue]) -&gt; None:\n\"\"\"Add a provider to the registry.\n\n    Args:\n        provider: The provider to add to the registry, bound to itself.\n\n    Examples:\n        &gt;&gt;&gt; di.add(DummyImpl)\n    \"\"\"\n    bind(provider, provider)\n</code></pre>"},{"location":"di/#deepblu.di.bind","title":"<code>bind(interface, impl)</code>","text":"<p>Bind an interface to an implementation.</p> <p>Parameters:</p> Name Type Description Default <code>interface</code> <code>TProvider[TValue]</code> <p>The interface to bind.</p> required <code>impl</code> <code>TProvider[TValue]</code> <p>The implementation to bind to the given interface.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; di.bind(DummyInterface, DummyImpl)\n&gt;&gt;&gt; di.bind(OtherDummyInterface, dummy_factory)\n</code></pre> Source code in <code>deepblu/di/__init__.py</code> <pre><code>def bind(interface: TProvider[TValue], impl: TProvider[TValue]) -&gt; None:\n\"\"\"Bind an interface to an implementation.\n\n    Args:\n        interface: The interface to bind.\n        impl: The implementation to bind to the given interface.\n\n    Examples:\n        &gt;&gt;&gt; di.bind(DummyInterface, DummyImpl)\n        &gt;&gt;&gt; di.bind(OtherDummyInterface, dummy_factory)\n    \"\"\"\n    registry[interface] = impl\n</code></pre>"},{"location":"di/#deepblu.di.bind_all","title":"<code>bind_all(*providers)</code>","text":"<p>Bind multiple interfaces to implementations.</p> <p>Parameters:</p> Name Type Description Default <code>providers</code> <code>AnyBinding | AnyProvider</code> <p>A list of Binding tuples of the form <code>(interface, implementation)</code>.</p> <code>()</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; di.bind_all((DummyInterface, DummyImpl), (OtherDummyInterface, dummy_factory))\n</code></pre> Source code in <code>deepblu/di/__init__.py</code> <pre><code>def bind_all(*providers: AnyBinding | AnyProvider) -&gt; None:\n\"\"\"Bind multiple interfaces to implementations.\n\n    Args:\n        providers: A list of Binding tuples of the form ```(interface, implementation)```.\n\n    Examples:\n        &gt;&gt;&gt; di.bind_all((DummyInterface, DummyImpl), (OtherDummyInterface, dummy_factory))\n    \"\"\"\n    for provider in providers:\n        if isinstance(provider, tuple):\n            interface, impl = provider\n        else:\n            interface, impl = provider, provider\n        bind(interface, impl)\n</code></pre>"},{"location":"di/#deepblu.di.get","title":"<code>get(interface)</code>","text":"<p>Get the implementation for an interface.</p> <p>Parameters:</p> Name Type Description Default <code>interface</code> <code>TProvider[TValue]</code> <p>The interface to get the implementation instance for.</p> required <p>Returns:</p> Type Description <code>TValue</code> <p>The implementation instance for the given interface.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dummy_instance: DummyInterface = di.get(DummyInterface)\n&gt;&gt;&gt; other_dummy_instance: OtherDummyInterface = di.get(OtherDummyInterface)\n</code></pre> Source code in <code>deepblu/di/__init__.py</code> <pre><code>def get(interface: TProvider[TValue]) -&gt; TValue:\n\"\"\"Get the implementation for an interface.\n\n    Args:\n        interface: The interface to get the implementation instance for.\n\n    Returns:\n        The implementation instance for the given interface.\n\n    Examples:\n        &gt;&gt;&gt; dummy_instance: DummyInterface = di.get(DummyInterface)\n        &gt;&gt;&gt; other_dummy_instance: OtherDummyInterface = di.get(OtherDummyInterface)\n    \"\"\"\n    return registry[interface]()\n</code></pre>"},{"location":"di/#deepblu.di.inject","title":"<code>inject(func)</code>","text":"<p>Inject dependencies into a function class init.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <p>A dictionary of parameters to inject.</p> required Source code in <code>deepblu/di/__init__.py</code> <pre><code>def inject(func: TProvider[TValue]) -&gt; Callable[..., TValue]:\n\"\"\"Inject dependencies into a function class init.\n\n    Args:\n        params: A dictionary of parameters to inject.\n        The keys are the names of the parameters and the values are the\n    \"\"\"\n\n    @wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -&gt; TValue:\n        annotations = inspect.getfullargspec(func).annotations\n        for k, v in annotations.items():\n            if v in registry.bindings and k not in kwargs:\n                kwargs[k] = registry.bindings[v]()\n        return func(*args, **kwargs)\n\n    return wrapper\n</code></pre>"}]}
